#!/usr/bin/env python
import os
import sys
import subprocess
import shlex
import signal
import shutil
import pwd
from setup import color
from setup import installer_io
from setup import func_executor
from optparse import OptionParser
bold = color.bold
error = color.error
processify = func_executor.processify


parser = OptionParser()
parser.add_option('--chorus_user', action="store", dest="chorus_user",
                  help="provide the chorus user [default: %default]", default="chorus")
parser.add_option('--chorus_path', action="store", dest="chorus_path",
                  help="provide the chorus path [default: %default]", default="/usr/local/chorus")
parser.add_option('--data_path', action="store", dest="data_path",
                  help="provide the chorus data path [default: %default]", default="/data/chorus")
parser.add_option('--disable_spec', action="store_true", dest="disable_spec",
                  help="disable the spec check [default: %default]", default=False)
parser.add_option('-s', '--silent', action="store_true", dest="silent",
                  help="runing script silently [default: %default]", default=False)
options, args = parser.parse_args(sys.argv)

io = installer_io.InstallerIO(options.silent)

def exit_gracefully(signum, frame):
    print "\nInstall aborted, Cancelled by user"
    sys.exit(1)

def _eula_by_brand():
    filename = ""
    if os.getenv('PIVOTALLABEL') is None:
        filename = 'eula_alpine.txt'
    else:
        filename = 'eula_emc.txt'
    filename = os.path.join(os.path.dirname(os.path.abspath(__file__)), "setup/" + filename)
    with open(filename, 'r') as f:
        eula = f.read();
    return eula

def prompt_for_eula():
    eula = _eula_by_brand()
    print eula
    ret = io.require_confirmation("Do you accept the terms above?")
    if not ret:
        return False
    return True

def run(command):
    p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    return p.returncode, stdout, stderr

def run_interact(command, user):
    def demote(user_uid, user_gid):
        os.setgid(user_gid)
        os.setuid(user_uid)
    pw_record = pwd.getpwnam(user)
    user_uid = pw_record.pw_uid
    user_gid = pw_record.pw_gid
    return subprocess.call(shlex.split(command), preexec_fn=demote(user_uid, user_gid))


def output(msg):
    print "INFO : " + bold(msg)

def detect_pre_version(chorus_path):
    current_path = os.path.join(chorus_path, "current")
    if os.path.lexists(current_path) and os.path.islink(current_path):
        pre_version = os.path.basename(os.path.realpath(current_path))
        pre_version = pre_version.split("-")[0]
        return pre_version
    return None
def compare_version(cur, pre):
    cur = int(cur.replace(".", ""))
    pre = int(pre.replace(".", ""))
    if cur == pre:
        return 0
    elif cur < pre:
        return -1
    else:
        return 1

@processify(msg="->Copying Production...")
def copy_to_dest(installation_path, chorus_path, data_path, release_path):
    ret, stdout, stderr = run("mkdir -p %s && mkdir -p %s" % (chorus_path, data_path))
    if ret != 0:
        raise Exception("[ERROR] " + stderr)

    ret, stdout, stderr = run("cp -rf %s %s" % (os.path.join(installation_path, "version_build"), chorus_path))
    if ret != 0:
        raise Exception("[ERROR] " + stderr)
    if os.path.exists(release_path):
        shutil.rmtree(release_path)
    ret, stdout, stderr = run("mkdir -p %s && cp -rf %s %s" % (release_path, installation_path, release_path))
    if ret != 0:
        raise Exception("[ERROR] " + stderr)

@processify(msg="->Granting permission...")
def grant_permission(user, chorus_path, data_path):
    ret, stdout, stderr = run("chown -R %s:%s %s && chown -R %s:%s %s" % (user, user, chorus_path, user, user, data_path))
    if ret != 0:
        raise Exception("[ERROR] " + stderr)

def install():
    if not prompt_for_eula():
        print "Install aborted, Cancelled by user"
        return
    user = io.prompt("which user do you want to use to install chorus [default: %s]" % options.chorus_user, default=options.chorus_user)
    ret, stdout, stderr = run("useradd chorus")
    if ret not in [0,9]:
        if ret == 126:
            stderr += "Please run as the user with root permission\n"
        raise Exception(stderr)
    chorus_path = io.prompt("Please enter the full path to the Chorus installation directory [default: %s]" % options.chorus_path, default=options.chorus_path)
    data_path = io.prompt("Please enter the full path to the Chorus data directory (recommended 500GB) [default: %s]" % options.data_path, default=options.data_path)
    installation_path = os.path.join(os.path.dirname(__file__), "..")

    version = ""
    with open(os.path.join(installation_path, "version_build"), "r") as f:
        version = f.read().strip()

    release_path = os.path.join(chorus_path, "releases/%s" % version)

    pre_version = detect_pre_version(chorus_path)
    cur_version = version.split("-")[0]
    msg = "Installing"
    if pre_version is not None:
        default = "yes"
        if compare_version(cur_version, pre_version) == 1:
            msg = "Upgrade"
        elif compare_version(cur_version, pre_version) == -1:
            default = "no"
            msg = "Downgrade"
        else:
            default = "no"
            msg = "Re-install"
        if not io.require_confirmation("You already have chorus version: %s installed. \n" % pre_version\
			+"Do you want to %s the chorus to version: %s:" % (msg, cur_version), default):
            print "%s aborted, Cancelled by user" % msg
            return

    output("%s chorus version: %s to chorus and data path:" % (msg, version))
    copy_to_dest(installation_path, chorus_path, data_path, release_path)

    output("change %s's owner to %s:" % (chorus_path, user))
    grant_permission(user, chorus_path, data_path)

    _s = ""
    if options.silent:
        _s = "-s"
    _disable_spec = ""
    if options.disable_spec:
        _disable_spec = "--disable_spec"
    run_interact("%s setup %s --chorus_path=%s --data_path=%s %s" % \
                 (os.path.join(release_path, "packaging/setup/chorus_server"), _s, chorus_path, data_path, _disable_spec), user)

try:
    signal.signal(signal.SIGINT, exit_gracefully)
    install()
except Exception as e:
    print "ERROR: " + error(str(e))
