#!/usr/bin/env python
import os
import sys
import subprocess
import signal
from setup import installer_io

silent = False
if len(sys.argv) == 2 and sys.argv[1]=="-s":
    silent = True
io = installer_io.InstallerIO(silent)

def exit_gracefully(signum, frame):
    print "\ninstall aborted, Cancelled by user"
    sys.exit(1)

def _eula_by_brand():
    filename = ""
    if os.getenv('PIVOTALLABEL') is None:
        filename = 'eula_alpine.txt'
    else:
        filename = 'eula_emc.txt'
    filename = os.path.join(os.path.dirname(os.path.abspath(__file__)), "setup/" + filename)
    with open(filename, 'r') as f:
        eula = f.read();
    return eula

def prompt_for_eula():
    eula = _eula_by_brand()
    print eula
    ret = io.require_confirmation("Do you accept the terms above?")
    if not ret:
        return False
    return True

def run(command):
    p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    return p.returncode, stdout, stderr

def install():
    if not prompt_for_eula():
        print "install aborted, Cancelled by user"
        return
    user = io.prompt("which user do you want to use to install chorus[default: chorus]", default="chorus")
    ret, stdout, stderr = run("useradd chorus")
    if ret not in [0,9]:
        raise Exception("[ERROR] " + stderr)
    chorus_path = io.prompt("Please enter the full path to the Chorus installation directory[default: /usr/local/chorus]", default="/usr/local/chorus")
    data_path = io.prompt("Please enter the full path to the Chorus data directory (recommended 500GB)[default:/data/chorus]", default="/data/chorus")
    print "creating chorus path"
    run("mkdir -p %s" % chorus_path)
    print "creating chorus data path"
    run("mkdir -p %s" % data_path)
    installation_path = os.path.join(os.path.dirname(__file__), "..")
    version = ""
    with open(os.path.join(installation_path, "version_build"), "r") as f:
        version = f.read().strip()

    run("cp -rf %s %s" % (os.path.join(installation_path, "version_build"), chorus_path))
    release_path = os.path.join(chorus_path, "releases/%s" % version)
    print "creating release path"
    run("mkdir -p %s" % release_path)
    print "copying chorus to %s" % release_path
    run("cp -rf %s %s" % (installation_path, release_path))
    print "change %s's owner to %s" % (chorus_path, user)
    run("chown -R %s:%s %s" % (user, user, chorus_path))
    run("chown -R %s:%s %s" % (user, user, data_path))
    os.system("su - %s -c \"%s setup --chorus_path=%s --data_path=%s\"" % (user, os.path.join(release_path, "packaging/setup/chorus_server"), chorus_path, data_path))

try:
    signal.signal(signal.SIGINT, exit_gracefully)
    install()
except Exception as e:
    print e
